using System;
using System.Globalization;
using System.Reflection;
using System.IO;

namespace GetAssemblyInfo
{
    class Program
    {
        public static Assembly GetAssembly(string fileName)
        {
            try
            {
                return Assembly.LoadFile(Path.GetFullPath(fileName));
            }
            catch (BadImageFormatException)
            {
                return null;
            }
        }

        public static bool AssemblyInDebugMode(Assembly assembly)
        {
            var attributes = assembly.GetCustomAttributes(typeof(System.Diagnostics.DebuggableAttribute), false);
            if (attributes.Length > 0)
            {
                var debuggable = attributes[0] as System.Diagnostics.DebuggableAttribute;
                if (debuggable != null)
                    return (debuggable.DebuggingFlags & System.Diagnostics.DebuggableAttribute.DebuggingModes.Default) == System.Diagnostics.DebuggableAttribute.DebuggingModes.Default;
                return false;
            }
            return false;
        }

        public static string AssemblyTitle(Assembly assembly)
        {
            object[] attributes =
                assembly.GetCustomAttributes(typeof(AssemblyTitleAttribute), false);
            if (attributes.Length > 0)
            {
                var titleAttribute = (AssemblyTitleAttribute)attributes[0];
                if (titleAttribute.Title != "")
                {
                    return titleAttribute.Title;
                }
            }
            return Path.GetFileNameWithoutExtension(assembly.CodeBase);
        }

        public static string AssemblyVersion(Assembly assembly)
        {
            return assembly.GetName().Version.ToString();
        }

        public static string AssemblyDescription(Assembly assembly)
        {
            object[] attributes =
               assembly.GetCustomAttributes(typeof(AssemblyDescriptionAttribute), false);
            if (attributes.Length == 0)
            {
                return "";
            }
            return ((AssemblyDescriptionAttribute) attributes[0]).Description;
        }


        public static string AssemblyProduct(Assembly assembly)
        {
            object[] attributes =
                assembly.GetCustomAttributes(typeof (AssemblyProductAttribute), false);
            if (attributes.Length == 0)
            {
                return "";
            }
            return ((AssemblyProductAttribute) attributes[0]).Product;
        }


        public static string AssemblyCopyright(Assembly assembly)
        {
            object[] attributes =
                assembly.GetCustomAttributes(typeof(AssemblyCopyrightAttribute), false);
            if (attributes.Length == 0)
            {
                return "";
            }
            return ((AssemblyCopyrightAttribute) attributes[0]).Copyright;
        }

        public static string AssemblyCompany(Assembly assembly)
        {
            object[] attributes =
                assembly.GetCustomAttributes(typeof(AssemblyCompanyAttribute), false);
            if (attributes.Length == 0)
            {
                return "";
            }
            return ((AssemblyCompanyAttribute) attributes[0]).Company;
        }

        public static string AssemblyDotNetVersion(Assembly assembly)
        {
            return assembly.ImageRuntimeVersion.Trim(new[] {'v'});
        }

        public static string AssemblyCompileTime(Assembly assembly)
        {
            // How cool isn't this?
            // Source: http://code.cheesydesign.com/?p=572
            return PeHeaderReader.GetAssemblyHeader(assembly).TimeStamp.ToString(System.Threading.Thread.CurrentThread.CurrentCulture);
        }

        static void Main(string[] args)
        {
            if (args.Length != 2)
            {
                Console.Error.WriteLine("GetAssemblyInfo: usage: GetAssemblyInfo InFile OutFile");
                return;
            }

            try
            {
                var assemblyFile = args[0];
                var targetFile = args[1];

                var assembly = GetAssembly(assemblyFile);
                String[] lines;

                if (assembly == null)
                {
                    const string errorMessage = "Can only load and read assemblies built with .NET 4 or less. Header will be empty";

                    Console.Error.WriteLine("GetAssemblyInfo: {0}", errorMessage);
                    lines =
                        new[]
                            {
                                String.Format("; Header generated by GetAssemblyInfo tool (by Jens Bråkenhielm) at {0}", DateTime.Now.ToString(System.Threading.Thread.CurrentThread.CurrentCulture)),
                                String.Format("; Failed to read assembly {0}! {1}", assemblyFile, errorMessage),
                                String.Format("; End of file")
                            };
                    File.WriteAllLines(targetFile, lines);
                    return;
                }

                var versionFull = AssemblyVersion(assembly);
                var versionNumbers = versionFull.Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
                var versionMajor = versionNumbers.Length > 0 ? versionNumbers[0] : "?";
                var versionMinor = versionNumbers.Length > 1 ? versionNumbers[1] : "?";
                var versionFeature = versionNumbers.Length > 2 ? versionNumbers[2] : "?";
                var versionBuild = versionNumbers.Length > 3 ? versionNumbers[3] : "?";
                
                lines =
                    new[]
                        {
                            String.Format("; Header generated by GetAssemblyInfo tool (by Jens Bråkenhielm) at {0}", DateTime.Now.ToString(System.Threading.Thread.CurrentThread.CurrentCulture)),
                            String.Format("#define ASSEMBLY_TITLE \"{0}\"", AssemblyTitle(assembly)),
                            String.Format("#define ASSEMBLY_VERSION \"{0}\"", AssemblyVersion(assembly)),
                            String.Format("#define ASSEMBLY_VERSION_SHORT \"{0}.{1}.{2}\"", versionMajor, versionMinor, versionFeature),
                            String.Format("#define ASSEMBLY_VERSION_BUILD \"{0}\"", versionBuild),
                            String.Format("#define ASSEMBLY_DESCRIPTION \"{0}\"", AssemblyDescription(assembly)),
                            String.Format("#define ASSEMBLY_PRODUCT \"{0}\"", AssemblyProduct(assembly)),
                            String.Format("#define ASSEMBLY_COPYRIGHT \"{0}\"", AssemblyCopyright(assembly)),
                            String.Format("#define ASSEMBLY_COMPANY \"{0}\"", AssemblyCompany(assembly)),
                            String.Format("#define ASSEMBLY_BUILDTYPE \"{0}\"",  AssemblyInDebugMode(assembly) ? "Debug" : "Release"),
                            String.Format("#define ASSEMBLY_DOTNETVERSION \"{0}\"", AssemblyDotNetVersion(assembly)),
                            String.Format("#define ASSEMBLY_COMPILETIME \"{0}\"", AssemblyCompileTime(assembly)),
                            String.Format("; End of file")
                        };

                File.WriteAllLines(targetFile, lines);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine(String.Format("GetAssemblyInfo: error: {0}", ex));      
            }
        }
    }
}
